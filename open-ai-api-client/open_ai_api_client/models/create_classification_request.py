from typing import TYPE_CHECKING, Any, Dict, List, Type, TypeVar, Union, cast

import attr

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.create_classification_request_logit_bias import CreateClassificationRequestLogitBias


T = TypeVar("T", bound="CreateClassificationRequest")


@attr.s(auto_attribs=True)
class CreateClassificationRequest:
    """
    Attributes:
        model (str): ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see
            all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
        query (str): Query to be classified. Example: The plot is not very attractive..
        examples (Union[Unset, None, List[List[str]]]): A list of examples with labels, in the following format:

            `[["The movie is so interesting.", "Positive"], ["It is quite boring.", "Negative"], ...]`

            All the label strings will be normalized to be capitalized.

            You should specify either `examples` or `file`, but not both.
             Example: [['Do not see this film.', 'Negative'], ['Smart, provocative and blisteringly funny.', 'Positive']].
        file (Union[Unset, None, str]): The ID of the uploaded file that contains training examples. See [upload
            file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.

            You should specify either `examples` or `file`, but not both.
        labels (Union[Unset, None, List[str]]): The set of categories being classified. If not specified, candidate
            labels will be automatically collected from the examples you provide. All the label strings will be normalized
            to be capitalized. Example: ['Positive', 'Negative'].
        search_model (Union[Unset, None, str]): ID of the model to use for [Search](/docs/api-
            reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`. Default: 'ada'.
        temperature (Union[Unset, None, float]): What sampling temperature to use, between 0 and 2. Higher values like
            0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        logprobs (Union[Unset, None, int]): Include the log probabilities on the `logprobs` most likely tokens, as well
            the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The
            API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the
            response.

            The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help
            center](https://help.openai.com) and describe your use case.

            When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs.
        max_examples (Union[Unset, None, int]): The maximum number of examples to be ranked by [Search](/docs/api-
            reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with
            increased latency and cost. Default: 200.
        logit_bias (Union[Unset, None, CreateClassificationRequestLogitBias]): Modify the likelihood of specified tokens
            appearing in the completion.

            Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias
            value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and
            GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model
            prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase
            likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant
            token.

            As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
        return_prompt (Union[Unset, None, bool]): If set to `true`, the returned JSON will include a "prompt" field
            containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
        return_metadata (Union[Unset, None, bool]): A special boolean flag for showing metadata. If set to `true`, each
            document entry in the returned JSON will contain a "metadata" field.

            This flag only takes effect when `file` is set.
        expand (Union[Unset, None, List[Any]]): If an object name is in the list, we provide the full information of the
            object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for
            expansion.
        user (Union[Unset, str]): A unique identifier representing your end-user, which can help OpenAI to monitor and
            detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
             Example: user-1234.
    """

    model: str
    query: str
    examples: Union[Unset, None, List[List[str]]] = UNSET
    file: Union[Unset, None, str] = UNSET
    labels: Union[Unset, None, List[str]] = UNSET
    search_model: Union[Unset, None, str] = "ada"
    temperature: Union[Unset, None, float] = 0.0
    logprobs: Union[Unset, None, int] = UNSET
    max_examples: Union[Unset, None, int] = 200
    logit_bias: Union[Unset, None, "CreateClassificationRequestLogitBias"] = UNSET
    return_prompt: Union[Unset, None, bool] = False
    return_metadata: Union[Unset, None, bool] = False
    expand: Union[Unset, None, List[Any]] = UNSET
    user: Union[Unset, str] = UNSET

    def to_dict(self) -> Dict[str, Any]:
        model = self.model
        query = self.query
        examples: Union[Unset, None, List[List[str]]] = UNSET
        if not isinstance(self.examples, Unset):
            if self.examples is None:
                examples = None
            else:
                examples = []
                for examples_item_data in self.examples:
                    examples_item = examples_item_data

                    examples.append(examples_item)

        file = self.file
        labels: Union[Unset, None, List[str]] = UNSET
        if not isinstance(self.labels, Unset):
            if self.labels is None:
                labels = None
            else:
                labels = self.labels

        search_model = self.search_model
        temperature = self.temperature
        logprobs = self.logprobs
        max_examples = self.max_examples
        logit_bias: Union[Unset, None, Dict[str, Any]] = UNSET
        if not isinstance(self.logit_bias, Unset):
            logit_bias = self.logit_bias.to_dict() if self.logit_bias else None

        return_prompt = self.return_prompt
        return_metadata = self.return_metadata
        expand: Union[Unset, None, List[Any]] = UNSET
        if not isinstance(self.expand, Unset):
            if self.expand is None:
                expand = None
            else:
                expand = self.expand

        user = self.user

        field_dict: Dict[str, Any] = {}
        field_dict.update(
            {
                "model": model,
                "query": query,
            }
        )
        if examples is not UNSET:
            field_dict["examples"] = examples
        if file is not UNSET:
            field_dict["file"] = file
        if labels is not UNSET:
            field_dict["labels"] = labels
        if search_model is not UNSET:
            field_dict["search_model"] = search_model
        if temperature is not UNSET:
            field_dict["temperature"] = temperature
        if logprobs is not UNSET:
            field_dict["logprobs"] = logprobs
        if max_examples is not UNSET:
            field_dict["max_examples"] = max_examples
        if logit_bias is not UNSET:
            field_dict["logit_bias"] = logit_bias
        if return_prompt is not UNSET:
            field_dict["return_prompt"] = return_prompt
        if return_metadata is not UNSET:
            field_dict["return_metadata"] = return_metadata
        if expand is not UNSET:
            field_dict["expand"] = expand
        if user is not UNSET:
            field_dict["user"] = user

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        from ..models.create_classification_request_logit_bias import CreateClassificationRequestLogitBias

        d = src_dict.copy()
        model = d.pop("model")

        query = d.pop("query")

        examples = []
        _examples = d.pop("examples", UNSET)
        for examples_item_data in _examples or []:
            examples_item = cast(List[str], examples_item_data)

            examples.append(examples_item)

        file = d.pop("file", UNSET)

        labels = cast(List[str], d.pop("labels", UNSET))

        search_model = d.pop("search_model", UNSET)

        temperature = d.pop("temperature", UNSET)

        logprobs = d.pop("logprobs", UNSET)

        max_examples = d.pop("max_examples", UNSET)

        _logit_bias = d.pop("logit_bias", UNSET)
        logit_bias: Union[Unset, None, CreateClassificationRequestLogitBias]
        if _logit_bias is None:
            logit_bias = None
        elif isinstance(_logit_bias, Unset):
            logit_bias = UNSET
        else:
            logit_bias = CreateClassificationRequestLogitBias.from_dict(_logit_bias)

        return_prompt = d.pop("return_prompt", UNSET)

        return_metadata = d.pop("return_metadata", UNSET)

        expand = cast(List[Any], d.pop("expand", UNSET))

        user = d.pop("user", UNSET)

        create_classification_request = cls(
            model=model,
            query=query,
            examples=examples,
            file=file,
            labels=labels,
            search_model=search_model,
            temperature=temperature,
            logprobs=logprobs,
            max_examples=max_examples,
            logit_bias=logit_bias,
            return_prompt=return_prompt,
            return_metadata=return_metadata,
            expand=expand,
            user=user,
        )

        return create_classification_request
